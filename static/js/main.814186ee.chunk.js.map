{"version":3,"sources":["Components/Button.js","Components/Quote.js","App.js","reportWebVitals.js","index.js"],"names":["Button","label","handleClick","handleDisable","next","previous","classes","classNames","className","onClick","disabled","Quote","author","quote","App","useState","disablePreviousButton","setDisablePreviousButton","currentQuote","setCurrentQuote","previousQuotes","setPreviousQuotes","getRandomQuote","fetch","then","response","json","data","Math","floor","random","length","catch","error","console","useEffect","filter","_","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAiBeA,MAdf,YAAwE,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACjDC,EAAUC,IAAW,CACvB,QAAU,EACV,cAAeH,EACf,mBAAoBC,EACpB,mBAAoBF,IAIxB,OACI,wBAAQK,UAAWF,EAASG,QAASP,EAAaQ,SAAUP,EAA5D,SAA4EF,K,MCFrEU,MATf,YAAmC,IAAlBC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MACvB,OACE,sBAAKL,UAAU,QAAf,UACE,sBAAMA,UAAU,qBAAhB,SAAsCK,IACtC,sBAAML,UAAU,sBAAhB,SAAuCI,QCyC9BE,MA1Cf,WAAgB,IAAD,EAC6CC,oBAAS,GADtD,mBACNC,EADM,KACiBC,EADjB,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,OAG+BJ,mBAAS,IAHxC,mBAGNK,EAHM,KAGUC,EAHV,KAKPC,EAAiB,WACrBC,MAAM,yIACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUA,EAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,YACpDP,MAAK,SAACX,GAAD,OAAWM,EAAgBN,MAChCmB,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,OAqBpC,OAJAE,qBAAU,WACRb,MACC,IAGD,sBAAKd,UAAU,MAAf,UACE,cAAC,EAAD,CAAOI,OAAM,OAAEM,QAAF,IAAEA,OAAF,EAAEA,EAAcN,OAAQC,MAAK,OAAEK,QAAF,IAAEA,OAAF,EAAEA,EAAcL,QAC1D,sBAAKL,UAAU,iBAAf,UACE,cAAC,EAAD,CAAQH,UAAQ,EAACJ,MAAM,WAAWC,YAhBf,WACvBiB,EAAgBC,EAAeA,EAAeW,OAAS,IACvDV,GAAkB,SAACD,GAAD,OAAoBA,EAAegB,QAAO,SAACC,EAAGxB,GAAJ,OAAcA,IAAUO,EAAeW,OAAS,QAC9E,IAA1BX,EAAeW,QACjBd,GAAyB,IAY0Cd,cAAea,IAChF,cAAC,EAAD,CAAQZ,MAAI,EAACH,MAAM,MAAMC,YAvBX,WAClBmB,GAAkB,SAAAD,GAAc,4BAAQA,GAAR,CAAwBF,OACxDI,IACAL,GAAyB,aCTdqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.814186ee.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport \"./Button.scss\";\n\nfunction Button({ label, handleClick, handleDisable, next, previous }) {\n    const classes = classNames({\n        \"button\": true,\n        \"button--new\": next,\n        \"button--previous\": previous,\n        \"button--disabled\": handleDisable\n    })\n\n\n    return (\n        <button className={classes} onClick={handleClick} disabled={handleDisable}>{label}</button>\n    );\n}\n\nexport default Button;","import \"./Quote.scss\";\n\nfunction Quote({ author, quote }) {\n  return (\n    <div className=\"Quote\">\n      <span className=\"Quote__text--quote\">{quote}</span>\n      <span className=\"Quote__text--author\">{author}</span>\n    </div>\n  );\n}\n\nexport default Quote;","import { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport { Button, Quote } from \"./Components\";\n\nfunction App() {\n  const [disablePreviousButton, setDisablePreviousButton] = useState(true);\n  const [currentQuote, setCurrentQuote] = useState(\"\");\n  const [previousQuotes, setPreviousQuotes] = useState([]);\n\n  const getRandomQuote = () => {\n    fetch(\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\")\n      .then((response) => response.json())\n      .then((data) => data[Math.floor(Math.random() * data.length)])\n      .then((quote) => setCurrentQuote(quote))\n      .catch((error) => console.error(error));\n  }\n\n  const getNewQuote = () => {\n    setPreviousQuotes(previousQuotes => [...previousQuotes, currentQuote]);\n    getRandomQuote();\n    setDisablePreviousButton(false);\n  }\n\n  const getPreviousQuote = () => {\n    setCurrentQuote(previousQuotes[previousQuotes.length - 1])\n    setPreviousQuotes((previousQuotes) => previousQuotes.filter((_, quote) => quote !== previousQuotes.length - 1))\n    if (previousQuotes.length === 1) {\n      setDisablePreviousButton(true);\n    }\n  }\n\n  useEffect(() => {\n    getRandomQuote();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Quote author={currentQuote?.author} quote={currentQuote?.quote}></Quote>\n      <div className=\"btn__container\">\n        <Button previous label=\"Previous\" handleClick={getPreviousQuote} handleDisable={disablePreviousButton} />\n        <Button next label=\"New\" handleClick={getNewQuote} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}